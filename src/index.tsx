import React, { useEffect } from 'react'
import ReactDOM from 'react-dom/client';
import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
import axios from 'axios';



// Types
type PostDomainType = PostType & {
  isDisabled: boolean
}

type PostType = {
  body: string
  id: string
  title: string
  userId: string
}


// Api
const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})

const postsAPI = {
  getPosts() {
    return instance.get<PostType[]>('posts')
  },
  deletePost(id: string) {
    return instance.delete<{ message: string }>(`posts/${id}?delay=3`)
  }
}


// Reducer
const initState = {
  isLoading: false,
  posts: [] as PostDomainType[]
}

type InitStateType = typeof initState

const postsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
  switch (action.type) {
    case 'POSTS/GET-POSTS':
      return {
        ...state, posts: action.posts.map(t => {
          return {...t, isDisabled: false}
        })
      }

    case 'POSTS/DELETE-POST':
      return {...state, posts: state.posts.filter(t => t.id !== action.id)}

    case 'POSTS/IS-LOADING':
      return {...state, isLoading: action.isLoading}

    case 'POSTS/IS-DISABLED':
      return {
        ...state, posts: state.posts.map((t) => {
          if (t.id === action.id) {
            return {...t, isDisabled: action.isDisabled}
          } else {
            return t
          }
        })
      }

    default:
      return state
  }
}

const getPostsAC = (posts: PostType[]) => ({type: 'POSTS/GET-POSTS', posts} as const)
const deletePostAC = (id: string) => ({type: 'POSTS/DELETE-POST', id} as const)
const setLoadingAC = (isLoading: boolean) => ({type: 'POSTS/IS-LOADING', isLoading} as const)
const setIsDisabled = (isDisabled: boolean, id: string) => ({type: 'POSTS/IS-DISABLED', isDisabled, id} as const)
type ActionsType =
   | ReturnType<typeof getPostsAC>
   | ReturnType<typeof deletePostAC>
   | ReturnType<typeof setLoadingAC>
   | ReturnType<typeof setIsDisabled>

// Thunk
const getPostsTC = (): AppThunk => (dispatch) => {
  postsAPI.getPosts()
     .then((res) => {
       dispatch(getPostsAC(res.data))
     })
}

const deletePostTC = (id: string): AppThunk => (dispatch) => {
  dispatch(setIsDisabled(true, id))
  dispatch(setLoadingAC(true))
  postsAPI.deletePost(id)
     .then((res) => {
       dispatch(deletePostAC(id))
       dispatch(setLoadingAC(false))
     })
}

// Store
const rootReducer = combineReducers({
  posts: postsReducer,
})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// Loader
export const Loader = () => {
  return (
     <h1>Loading ...</h1>
  )
}

// App
const App = () => {
  const dispatch = useAppDispatch()
  const posts = useAppSelector(state => state.posts.posts)
  const isLoading = useAppSelector(state => state.posts.isLoading)

  useEffect(() => {
    dispatch(getPostsTC())
  }, [])

  const deletePostHandler = (id: string) => {
    dispatch(deletePostTC(id))
  };

  return (
     <div>
       <div style={{position: 'absolute', top: '0px'}}>
         {isLoading && <Loader/>}
       </div>
       <div style={{marginTop: '100px'}}>
         <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
         {posts.map(p => {
           return (
              <div key={p.id}>
                <b>title</b>: {p.title}
                <button style={{marginLeft: '15px'}}
                        onClick={() => deletePostHandler(p.id)}
                >
                  —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
                </button>
              </div>
           )
         })}
       </div>
     </div>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}> <App/></Provider>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤.
// –û—Ç–∫—Ä–æ–π—Ç–µ network –∏ –±—ã—Å—Ç—Ä–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.
// –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∫–ª–∞–¥–∫—É Preview –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
// –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç "Post has been successfully deleted",
// –∞ —Å–ª–µ–¥—É—é—â–∏–µ "Post with id: 63626ac315d01f80765587ee does not exist"
// –¢.–µ. –±—ç–∫–µ–Ω–¥ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —É–¥–∞–ª—è–µ—Ç, –∞ –ø–æ—Ç–æ–º —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç, —Ç.–∫. –ø–æ—Å—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ –∑–∞–¥–∏–∑–∞–±–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è,
// —Å–æ–æ—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ –Ω–µ –¥–∞–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–ª–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
// –ù–µ–æ–±—Ö–æ–¥–∏–º—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: style={{marginRight: '20px'}}
